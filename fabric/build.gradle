plugins {
    id "com.gradleup.shadow"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$project.fabric_loader_version"

    // Fabric API.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$project.fabric_api_version"

    // Architectury API.
    modImplementation "dev.architectury:architectury-fabric:$project.architectury_api_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle project(path: ":common", configuration: "transformProductionFabric")

    shadowBundle implementation("com.discord4j:discord4j-core:${project.discord4j_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"

    relocate 'io.netty', 'shadow.io.netty'
    relocate 'org.checkerframework', 'shadow.org.checkerframework'
    relocate 'com.google', 'shadow.com.google'
}

remapJar {
    dependsOn(shadowJar)
    inputFile = tasks.shadowJar.archiveFile
}
